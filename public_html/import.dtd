<!--
   Watstemtmijnraad Raadsstukken import DTD

   Namespace = http://watstemtmivjnraad.gl

   Copyright (c) 2009 Accepté
   All Rights Reserved. 

   This DTD module is identified by the SYSTEM identifier:

   SYSTEM "http://watstemtmijnraad.gl/import.dtd"
-->

<!-- Import block, root element. -->
<!ELEMENT import (schema?, raadsstukken?)>
<!-- 
	version - import file version, always 1.0
	site    - site name, eg "Watstemtmijnraad" or "Politix"
-->
<!ATTLIST import
    version   CDATA         #REQUIRED
    site      CDATA         #REQUIRED
    >


<!-- "The World" of Watstemtmijnraad. Describes all objects referenced by raadsstukken -->
<!ELEMENT schema (regions?, categories?, parties?, politicians?)>
<!ATTLIST schema >


<!--
  Describes all regions references by this document.
  You should receive dump of region tree together with this DTD.
  
  The importer will lookup for any regions already defined in our database prior
  to create new one on demand. The unique name is used for the lookup. 
-->
<!ELEMENT regions (region*)>
<!ATTLIST regions >

<!--
    Region tree. Each raadsstuk, politician and party belong to one or more regions.
    
    The region is normally referenced by name path like:
      '/Europa/Nederland/Groningen' - starts by level 1, absolute path
      'Groningen' - starts by level 3 (provincie), relative path, resolved to /Europa/Nederland/Groningen
      'Groningen/Assen' - starts by level 3, relative path, resolved to /Europa/Nederland/Groningen/Assen
-->
<!ELEMENT region (regions?)>
<!--
	name  - name of the region, path of names in the tree is unique key
	path  - optional '/' separated path to the parent region. The path will be
            calculated from the current level. By default the path is empty, thus
            the parent region is the current node, except for the top most 'regions'
            element which has default path of 'Europa/Nederland'.
            
            Note: by using 'path' you may ommit 'regions' container and define
            the regions tree as a simple list of 'region' elements.
            
    Warning: you can't create regions 'Europa' and 'Nederland' at level 3, so
    any relative name starting with 'Europa will be seen as absolute /Europa and
    any relative name starting with Nederland will be seen as absolute /Europa/Nederland.
-->
<!ATTLIST region
    name    CDATA   #REQUIRED
    path    CDATA   #IMPLIED
    >


<!--
    List of categories referenced by other objects.
    
    You should obtain list of all categories together with this DTD.
    Any category not registered in watstemtmijnraad.nl database can be
    added on demand by 'category' element described bellow.
-->
<!ELEMENT categories (category*)>
<!ATTLIST categories >


<!--
    Single category.

    Per import file category list is optional, any missing category referenced
    elsewere will be created on demand. However this element is usefull to specify
    level information and description of the category.
    
    This element is also used in 'raadsstuk' element refferencing to a category.
    In that context 'description' attribute and any contents of this element
    will be ignored. If category doesn't exist, then it will be created on demand
    without additional info, so always define categories in header (schema) if
    you need descriptions and/of inlevel registrations.
-->
<!ELEMENT category (inlevel*)>
<!--
    name            - unique name of the category
    description     - description of the category, used only when creating new category, default empty
-->
<!ATTLIST category
    name            CDATA       #REQUIRED
    description     CDATA       #IMPLIED
>


<!--
    Per level category description.
    
    There are following levels available:
        - 1 - Internationaal - /Europa is of this level
        - 2 - Landelijk - /Europa/Nederland
        - 3 - Provincie - /Europa/Nederland/Groningen
        - 4 - Gemeente - /Europa/Nederland/Groningen/Assen
        - 5 - Stadsdeel - /Europa/Nederland/Noord-Holland/Amsterdam/Osdorp
    
    Other levels than listed above are invalid.
    
    Note: any number of categories can be assigned to any raadsstuk. However
    Politician appointment can only be assigned to categories specified explicitly
    at the region level of that appointment. The registration will be added ondemand
    if any appointment tries to reffer to non registered category.
    
    Note: don't ask me why this restriction exists... and why categories are linked to
    levels...
-->
<!ELEMENT inlevel EMPTY>
<!--
	level           - region level (number)
    description     - additional description of the category whithin this level, default empty
-->
<!ATTLIST inlevel
    level           CDATA       #REQUIRED
    description     CDATA       #IMPLIED
    >



<!-- Describes all parties references by this document. -->
<!ELEMENT parties (party*)>
<!ATTLIST parties >
    

<!-- Party tree.
     Party  name is unique.
-->
<!ELEMENT party (combination?, inregion*)>

<!--
	name   - unique name of the party, eg: Christen-Democratisch Appèl
	region - region path where in the party was "created", where party is "globaly" active, the level.
             Use '/Europa/Nederland' if you don't have such information.
             
	abbreviation - short form, eg: CDA, default empty
-->
<!ATTLIST party 
    name            CDATA       #REQUIRED
    region          CDATA       #IMPLIED
    abbreviation    CDATA       #IMPLIED
    >


<!-- List of all parent parties.
     If this element is present and is not empty, then party becomes a combination
     of other parties. For example 'Progressief Woerden (PvdA/GroenLinks)' is a
     combination of 'GroenLinks' and 'Partij van de Arbeid'
-->
<!ELEMENT combination (partyref*)>
<!ATTLIST combination >

<!-- Reference to a party within combination block. -->
<!ELEMENT partyref EMPTY>
<!--
    party   - unique party name
-->
<!ATTLIST partyref
    party           CDATA       #REQUIRED
>


<!--
    Each party is present in one or more regions for specific timerange.
    The timerange includes all the timeranges of containing appointments, but
    may be specified exactly by means of this element.
    
    In most cases you won't need this element, the politician appointments will
    extend/insert party region ranges as they change. If a new range overlaps with
    existing one, then existing range will be extended. If a new range completely
    covers other ranges, then other ranges will be deleted. This ensures that for
    any given moment of time there exists not more than one 'inregion' range, that
    contains that point of time.
-->
<!ELEMENT inregion EMPTY>
<!--
	region     - region path where in party may vote voor a raadsstuk
    date_start - 'YYYY-mm-dd' or 'dd-mm-YYYY', first day, inclusive, default: negative infinity
    date_end   - 'YYYY-mm-dd' or 'dd-mm-YYYY', last day, inclusive, default: positive infinity
-->
<!ATTLIST inregion
    region          CDATA       #REQUIRED
    date_start      CDATA       #IMPLIED
    date_end        CDATA       #IMPLIED
    >


<!--
    List of all politicians refferenced by raadsstukken in this document.
    
    The politician is the one that may:
    
      - submit a raadsstuk
      - vote for a raadsstuk
    
    You should obtain list of all politicians together with this DTD.
    Any politician not registered in watstemtmijnraad.nl database can be
    registered by 'politician' element described bellow.
-->
<!ELEMENT politicians (politician*)>
<!ATTLIST politicians >


<!--
    Register politician. A politician is a unique combination of:
        (initials, last_name, gender, email)
        
    Importer look-up's for any already defined politician usign fields described above.
    Any missing politician will be created on demand.
    
    WARNING: If you want to add a *new* politician with already existing
    (initials, last_name, gender) combinatin, then be sure to provide email and/or
    region distinct from already existing politician. Otherwise you will link all
    info to the existing politician. Of course you should be sure that your person
    and the registered one are really different people in the real world.
    
    The 'id' is an document wide unique identifier of the politician. This id
    is further used to identify politicuan short and quickly (when voting).
-->
<!ELEMENT politician (appointment*)>
<!--
	id       	- unique identifier of this politician.
    title       - title of the politician, default empty
    initials    - initials of the politician, default empty
    last_name   - last name of the politicians including any prefixes like 'van der', default empty
    gender      - gender of the politician, either 'male' or 'female'.
    email       - e-mail, default empty
    region      - region path, region where in this politician was "created", default empty
-->
<!ATTLIST politician
    id          CDATA           #REQUIRED
    title       CDATA           #IMPLIED
    initials    CDATA           #IMPLIED
    last_name   CDATA           #REQUIRED
    gender      (male|female)   #REQUIRED
    email       CDATA           #IMPLIED
    region      CDATA           #IMPLIED
    >

    
<!--
    Optional element, register the politician for a specific function/appointment in (region, party).
                            
	To be able to make vote for a specific raadsstuk the politician must have a not-expired 
	function/appointment in the region of that raadsstuk, otherwise importing will fail. So
	the basic rule is:
		-    - if your politician votes for a raadsstuk at specific vote_date
		- OR - if your politician submits the raadsstuk at specific vote_date
                              
	Then this politicians must have an appointment which [time_start - time_end] covers the vote_date
	of the related raadsstuk. Of course you don't have to specify anything if you follow the real life
	facts, because watstemtmijnraad.nl keeps updating appointments of politicians. So, it is usually
	better *NOT* to define any appointment if you don't have such info.
                            
	Constraint:
		(politician.party.inregion.region = politician.appointment.region) AND
		(politician.party.inregion.[date_start, date_end] include politician.function.[date_start, date_end]
        
-->
<!ELEMENT appointment EMPTY>
<!--
	category        - name of the category describing the function of the politician, default 'Geen' (no category)
    region          - region path where in this politician works (he/she may vote for raadsstukken in this region)
    party           - the party name where this politician belongs to
    date_start      - 'YYYY-mm-dd' or 'dd-mm-YYYY', first day, inclusive, default: negative infinity
    date_end        - 'YYYY-mm-dd' or 'dd-mm-YYYY', last day, inclusive, default: positive infinity
    description     - short description of the function, default empty
-->
<!ATTLIST appointment
    category        CDATA       #IMPLIED
    region          CDATA       #REQUIRED
    party           CDATA       #REQUIRED
    date_start      CDATA       #IMPLIED
    date_end        CDATA       #IMPLIED
    description     CDATA       #IMPLIED
    >

    
<!-- Block of raadstukken to import. -->
<!ELEMENT raadsstukken (raadsstuk*)>
<!ATTLIST raadsstukken >


<!--
    Single raadsstuk to import.
    
    The collection of tags is optional, any missing tag will be created on demand.
    
    The 'description' and any 'level' information of the 'category' element will be
    ignored if category with such name is already defined in schema or is found
    in watstemtmijnraad.nl database.
-->
<!ELEMENT raadsstuk (summary, submitter, tag*, category*, votes?)>
<!--
	id          - docment wide unique identifier that is used by 'parentref' elements of the submitting procedure
    title       - name, short (single line) description
    code        - source ID and any other info important to the source site (free field), default empty
    vote_date   - voting date, format: YYYY-mm-dd or dd-mm-YYYY
    region      - region path, region where this raadsstuk belongs to
    show        - show in home page, default no
    refid       - raadsstuk id on remote server, used in response to map local_id => refid
    local_id    - raadsstuk id on this server, if present, then given raadsstuk definition will entirely replace the raadstuk pointed by local_id (dangerous!)
-->
<!ATTLIST raadsstuk
    id          CDATA          #IMPLIED
    title       CDATA       #REQUIRED
    code        CDATA       #IMPLIED
    vote_date   CDATA       #REQUIRED
    region      CDATA       #REQUIRED
    show        (yes|no)    #IMPLIED
    refid	CDATA	    #IMPLIED
    local_id    CDATA	    #IMPLIED
    >


<!-- Raadsstuk summary. Contains usually text in CDATA block -->
<!ELEMENT summary (#PCDATA)>
<!ATTLIST summary >


<!-- Assigns a single tag to the raadsstuk -->
<!ELEMENT tag EMPTY>
<!--
	name        - name of the tag, eg 'politix'
-->
<!ATTLIST tag
    name        CDATA       #REQUIRED
>


<!--
    The submitting procedure.
    
    Depending on the 'type' the submitter may or may not contain the list of
    politicians and reffer to the parent raadsstuk. Following types are available:
    
        - "Raadsvoorstel" - attribute 'submitter' is accepted and can be only "College", "Presidium" or "Onbekend", contents of this element are rejected
        - "Burgerinitiatief" - attributes are ignored and contents of this element will be rejected
        - "Initiatiefvoorstel" - list of 'politician' elements is accepted, 'submitter' attribute is ignored, 'parentref' element is rejected
        - "Motie", "Amendement" -  'parentref' element and list of 'politician' elements are accepted, 'submitter' attribute is ignored
        - "Onbekend" - attributes are ignored and contents of this element will be rejected

    The following values are possible for 'submitter' attribute:
    
        - "College", "Presidium", "Onbekend" - used by "Raadsvoorstel"
        - "Raadslid" - used by "Initiatiefvoorstel", "Motie" and "Amendement"
        - "Burger" - used by "Burgerinitiatief"
        - "Onbekend" - used by "Onbekend"

    Note: rejecting means an the import will fail with error if unexpected elelemnt is found.
    This is to prevent silent dataloss, because selected config will not store this data.
    
    Note: set submitter to "Onbekend" if you don't have such info.
    All other contents are optional, skip if you don't have such info.
-->
<!ELEMENT submitter (parentref?, politicianref*)>
<!--
	type            - submitting instance type
    submitter       - submitter type
-->
<!ATTLIST submitter
    type            CDATA       #REQUIRED
    submitter       CDATA       #IMPLIED
>


<!--
    Links the child raadsstuk to the parent raadsstuk.
    
    WARNING: referenced raadsstuk MUST be defined prior to referencing them!
-->
<!ELEMENT parentref EMPTY>
<!--
	raadsstuk       - references 'id' attribute of the 'raadsstuk' element
-->
<!ATTLIST parentref
    raadsstuk       CDATA       #REQUIRED
>


<!-- Links politician with the submitting procedure of the raadsstuk. -->
<!ELEMENT politicianref EMPTY>
<!--
	politician       - references 'id' attribute of the 'politician' element
-->
<!ATTLIST politicianref
    politician       CDATA       #REQUIRED
>


<!-- Votes block. -->
<!ELEMENT votes (vote*)>
<!--
	type        - voting resolution, either per party or per politician.
    result      - the actual/real-life status of the raadsstuk. for flexibility
                  reasons it is possible that all politicians vote 'no' and the
                  status is 'accepted', default 'new'.
-->
<!ATTLIST votes
    type        (politician|party)          #REQUIRED
    result      (new|declined|accepted)     #IMPLIED
>


<!--
    A single vote.
    
    If the vote belongs to a party, then the vote will be assigned for the
    special "Onbekend" politician. You can't mix votes of politicians and parties
    together in one 'votes' block. 
    
    If vote block type is 'politician', then you have to specify the politician
    id. The politician may not vote if he/she hasn't a valid function in the region
    of the raadsstuk covering the vote date. If you also specify party, then an appointment
    will be created automatically for the politician, so data will always be consistent.
    If party is omitted, the importer will fail and rollback any changes. In this case you
    have to go to the problem politician and update his/her appointments to cover the
    vote date of failed raadsstuk.
-->
<!ELEMENT vote EMPTY>
<!--
	vote            - the vote made
    politician      - if votes.type is 'politician' then this attribute reffers
                      to the politician.id that made the vote, eg '15'
                      reffer to 'politician' element for more info.

    party           - party name
                      
    Constraint: vote.type == 'party' then require party, reject politician
                vote.type == 'politician' then require politician, accept party
-->
<!ATTLIST vote
    vote            (yes|no|remember|absent)    #REQUIRED
    politician      CDATA                       #IMPLIED
    party           CDATA                       #IMPLIED
>

<!-- End of import file definition.
     @author Sardar Yumatov (ja.doma@gmail.com)
-->
